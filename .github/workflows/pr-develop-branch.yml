name: Validar PR na brach de Desenvolvimento

# Parametros de quando irá executor a ação
on:
  pull_request:
    types: [opened, synchronize]
    # Irá executar somente em um PR para a branch de "develop"
    branches: [develop]
    # Executar sempre que houver alterações no path abaixo
    paths:
      - "force-app/**"

# Trabalhos a serem executados
jobs:
  validar-deploy-na-organizacao-de-develop:
    runs-on: ubuntu-latest
    if: ${{ github.actor != 'dependabot[bot]' }}
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: "20"

      - name: "Conferir código fonte"
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: "Ler corpo do PR e extrair classes de teste"
        env:
          PR_BODY: ${{github.event.pull_request.body}}

        run: |
          echo $PR_BODY > ./.process/pr_body.txt
          node ./.process/parsePR.js              
          TESTS=$(cat ./.process/testsToRun.txt)       
          echo "APEX_TESTS=$TESTS" >> $GITHUB_ENV

      - name: "Intalação Salesforce CLI"
        run: |
          npm install @salesforce/cli --global
          sf --version

      - name: "Instalação do Git Delta"
        run: |
          echo y | sf plugins:install sfdx-git-delta

      - name: "Instalação do Java"
        run: |
          sudo apt-get update
          sudo apt install default-jdk

        # Comando para obter URL de autenticação -> sfdx force:org:display -u my-scratch-org --verbose
      - name: "Criar arquivo com URL de autenticação"
        shell: bash
        run: |
          echo ${{ secrets.SF_DEVELOP_URL}} > ./SF_DEVELOP_URL.txt

      # Authenticate to org using the URL stored in the text file
      - name: "Authenticate to Integration Org"
        run: sf org login sfdx-url -f ./SF_DEVELOP_URL.txt --set-default --alias develop

      # We use SFDX Git Delta to create a directory with only the metadata that has changed.
      # this allows us to deploy only those changes, as opposed to deploying the entire branch.
      # This helps reducing deployment times
      - name: "Create delta packages for new, modified or deleted metadata"
        run: |
          mkdir changed-sources
          sfdx sgd:source:delta --to "HEAD" --from "HEAD^" --output changed-sources/ --generate-delta --source force-app/

      # Now we can use the sfdx scanner to scan the code in the delta directory
      # The output of the scan is stored in a file called apexScanResults.sarif

      # The .sarif file can later be uploaded to github, so that we can see the
      # results of the scan directly from the PR.

      # Now we upload the .sarif file as explained in the previous step

      # We do a check-only deploy and we only run the tests specified in the PR
      # If the env variable does not equal 'all', we know that there is a list of
      # tests that can be run

      - name: "Check-only deploy delta changes - run specified tests"
        if: ${{ env.APEX_TESTS != 'all' }}
        run: |
          echo ${{env.APEX_TESTS}}
          sfdx force:source:deploy -p "changed-sources/force-app" --checkonly --testlevel RunSpecifiedTests --runtests ${{env.APEX_TESTS}} --json

      # If the env variable equals all, we run all tests
      - name: "Check-only deploy delta changes - run all tests"
        if: ${{ env.APEX_TESTS == 'all' }}
        run: |
          sfdx force:source:deploy -p "changed-sources/force-app" --checkonly --testlevel RunLocalTests  --json

      - name: "Deploy destructive changes (if any)"
        run: sfdx force:mdapi:deploy -d "changed-sources/destructiveChanges" --checkonly --ignorewarnings
